name: "⚡ EnigMano Windows 11 Full Deployment"

on:
  workflow_dispatch:
    inputs:
      INSTANCE:
        description: "Instance number to deploy (e.g., 1, 2, 3...)"
        required: true
        default: "1"

jobs:
  deploy-enigmano:
    name: "🚀 Deploy EnigMano Instance ${{ github.event.inputs.INSTANCE }}"
    runs-on: windows-latest

    env:
      INSTANCE_ID: ${{ github.event.inputs.INSTANCE }}
      SECRET_SHAHZAIB: ${{ secrets.SECRET_SHAHZAIB }}
      NGROK_SHAHZAIB: ${{ secrets.NGROK_SHAHZAIB }}
      REPO: ${{ github.repository }}
      WORKFLOW_FILE: "enigmano-Win-11.yml"
      DEPLOYMENT_ID: ${{ github.run_id }}

    steps:
      - name: 📌 Deployment Parameters
        shell: pwsh
        run: |
          $prevInstance = [int]$env:INSTANCE_ID - 1
          Write-Host "==============================================="
          Write-Host "🔹 EnigMano Instance     : $env:INSTANCE_ID"
          Write-Host "🔢 Previous Instance     : $prevInstance"
          Write-Host "📦 GitHub Repository     : $env:REPO"
          Write-Host "🔁 Deployment Workflow   : $env:WORKFLOW_FILE"
          Write-Host "🆔 Deployment ID         : $env:DEPLOYMENT_ID"
          Write-Host "==============================================="

      - name: 🔐 Validate Secrets
        shell: pwsh
        run: |
          if (-not $env:SECRET_SHAHZAIB) { Write-Error "❌ Missing SECRET_SHAHZAIB"; exit 1 }
          if (-not $env:NGROK_SHAHZAIB) { Write-Error "❌ Missing NGROK_SHAHZAIB"; exit 1 }
          Write-Host "✅ All secrets validated"

      - name: 📥 Download EnigMano-Instance.ps1
        shell: pwsh
        run: |
          $url = "https://gitlab.com/Shahzaib-YT/enigmano-windows-11-with-sound/-/raw/main/EnigMano-Instance.ps1"
          Invoke-WebRequest -Uri $url -OutFile "EnigMano-Instance.ps1" -UseBasicParsing
          if (!(Test-Path "./EnigMano-Instance.ps1")) { Write-Error "❌ Download failed"; exit 1 }
          Write-Host "✅ EnigMano-Instance.ps1 downloaded"

      - name: 📥 Download Ngrok
        shell: pwsh
        run: |
          Invoke-WebRequest https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip -OutFile ngrok.zip
          Expand-Archive ngrok.zip -DestinationPath .
          .\ngrok.exe authtoken $Env:NGROK_SHAHZAIB

      - name: 🔐 Enable RDP and Add User
        shell: pwsh
        run: |
          net user amir20120 amiraliA@1 /add
          net localgroup administrators amir20120 /add
          reg add "HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server" /v fDenyTSConnections /t REG_DWORD /d 0 /f
          Enable-NetFirewallRule -DisplayGroup "Remote Desktop"

      - name: ⚔️ Start Ngrok TCP Tunnel and Show Link
        shell: pwsh
        run: |
          Start-Job { .\ngrok\ngrok.exe tcp 3389 --log=stdout } | Out-Null
          Start-Sleep -Seconds 10
          $tunnel = $null
          while (-not $tunnel) {
            try {
              $resp = Invoke-RestMethod -Uri "http://127.0.0.1:4040/api/tunnels"
              $tunnel = ($resp.tunnels | Where-Object { $_.proto -eq "tcp" }).public_url
            } catch { Start-Sleep -Seconds 5 }
          }
          Write-Host "====================================="
          Write-Host "استخدم هذا الرابط للاتصال بـ RDP:"
          Write-Host $tunnel
          Write-Host "اسم المستخدم: amir20120"
          Write-Host "كلمة المرور: amiraliA@1"
          Write-Host "====================================="

      - name: ⚡ Execute EnigMano-Instance.ps1
        shell: pwsh
        run: |
          Write-Host "🚦 Initiating EnigMano-Instance.ps1"
          powershell.exe -ExecutionPolicy Bypass -File ".\EnigMano-Instance.ps1"

      - name: 💠 Final Status
        if: always()
        shell: pwsh
        run: |
          Write-Host "✅ EnigMano Instance $env:INSTANCE_ID completed execution."
          Write-Host "🔋 Powered by: SHAHZAIB-YT"
